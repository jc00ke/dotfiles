#!/bin/bash

function log() {
  msg="$1"
  echo "********************************************"
  echo "$msg"
  echo "********************************************"
  echo ""
}
sudo apt install -y \
  autoconf \
  autopoint \
  bison \
  build-essential \
  cmake \
  curl \
  direnv \
  exuberant-ctags \
  fish \
  flameshot \
  git \
  git-doc \
  git-gui \
  git-svn \
  gitg \
  gnome-calculator \
  gnome-clocks \
  htop \
  i3xrocks-battery \
  i3xrocks-cpu-usage \
  i3xrocks-key-indicator \
  i3xrocks-memory \
  i3xrocks-net-traffic \
  i3xrocks-time \
  i3xrocks-weather \
  imagemagick \
  inotify-tools \
  jq \
  libclang-dev libffi-dev \
  libfreetype6-dev \
  libfontconfig1-dev \
  libgdbm-dev \
  libgtk-3-dev \
  libncurses5-dev \
  libreadline-dev \
  libssl-dev \
  libtool \
  libxcb-xfixes0-dev \
  libxml2-dev \
  libxslt1-dev \
  libyaml-dev \
  neovim \
  openconnect \
  openvpn \
  parallel \
  peek \
  pkg-config \
  pspg \
  python3 \
  python3-pip \
  regolith-look-solarized-dark \
  shellcheck \
  software-properties-common \
  ubuntu-restricted-extras \
  zlib1g-dev

log "Updating the yadm repo origin URL"
yadm remote set-url origin "git@github.com:jc00ke/dotfiles.git"

chsh -s /usr/bin/fish

mkdir -p $HOME/projects
mkdir -p $HOME/src
cd $HOME

if [ ! -d "$HOME/.config/omf" ]; then
  cd $HOME/src
  log "Installing oh-my-fish"
  curl -L http://get.oh-my.fish | fish
  echo "omf install cbjohnson" | fish
fi

cd $HOME
if [ ! -d $HOME/.asdf ]; then
  log "Installing asdf"
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8
fi

cd $HOME/src
log "Installing ngrok"
ngrok_package="ngrok-stable-linux-amd64"
ngrok_archive="$ngrok_package.zip"
wget "https://bin.equinox.io/c/4VmDzA7iaHb/$ngrok_archive"
unzip "$ngrok_archive"
chmod +x ngrok
sudo mv ngrok /usr/local/bin/

log "Installing fzf"
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install

log "Installing git-fuzzy"
git clone --depth 1 https://github.com/bigH/git-fuzzy.git ~/.git-fuzzy

log "Installing Rust"
asdf plugin-add rust https://github.com/code-lever/asdf-rust.git
rust_version="1.48.0"
asdf install rust $rust_version
asdf global rust $rust_version

log "Installing alacritty"
cd $HOME/src
alacritty_version="0.7.1"
wget "https://github.com/alacritty/alacritty/archive/v$alacritty_version.tar.gz"
tar xf "v$alacritty_version.tar.gz"
cd "alacritty-$alacritty_version/"
cargo build --release
sudo cp target/release/alacritty /usr/local/bin
sudo mkdir -p /usr/local/share/man/man1
gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null
sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
sudo desktop-file-install extra/linux/Alacritty.desktop
sudo update-desktop-database
mkdir -p $fish_complete_path[1]
cp extra/completions/alacritty.fish $fish_complete_path[1]/alacritty.fish
sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/local/bin/alacritty 50
sudo update-alternatives --config x-terminal-emulator
# to remove
# sudo update-alternatives --remove "x-terminal-emulator" "/usr/local/bin/alacritty"

pip3 install alacritty-colorscheme asciinema

log "Installing ripgrep"
cd $HOME/src
ripgrep_version="12.1.1"
ripgrep="ripgrep_${ripgrep_version}_amd64"
ripgrep_deb="$ripgrep.deb"
wget "https://github.com/BurntSushi/ripgrep/releases/download/$ripgrep_version/$ripgrep_deb"
sudo dpkg -i "$ripgrep_deb"

log "Installing starship"
cd $HOME
curl -fsSL "https://starship.rs/install.sh" | bash

log "Installing exa"
cd $HOME/src
exa_version="0.9.0"
exa="exa-linux-x86_64"
exa_zip="$exa-$exa_version.zip"
wget "https://github.com/ogham/exa/releases/download/v$exa_version/$exa_zip"
unzip "$exa_zip"
sudo mv "$exa" "/usr/local/bin/exa"

log "Installing delta"
cd $HOME/src
delta_version="0.4.4"
delta="git-delta-musl_${delta_version}_amd64"
delta_deb="$delta.deb"
wget "https://github.com/dandavison/delta/releases/download/$delta_version/$delta_deb"
sudo dpkg -i "$delta_deb"

log "Installing bat"
cd $HOME/src
bat_version="0.17.1"
bat="bat_${bat_version}_amd64"
bat_deb="$bat.deb"
wget "https://github.com/sharkdp/bat/releases/download/v$bat_version/$bat_deb"
sudo dpkg -i "$bat_deb"

log "Installing zoxide"
cd $HOME/src
zoxide_version="0.5.0"
zoxide="zoxide-x86_64-unknown-linux-musl"
wget "https://github.com/ajeetdsouza/zoxide/releases/download/v$zoxide_version/$zoxide"
sudo mv "$zoxide" "/usr/local/bin/zoxide"
sudo chmod +x "/usr/local/bin/zoxide"

log "Installing fd"
cd $HOME/src
export fd_version="8.2.1"
export fd="fd-musl_${fd_version}_amd64"
export fd_deb="$fd.deb"
wget "https://github.com/sharkdp/fd/releases/download/v$fd_version/$fd_deb"
sudo dpkg -i "$fd_deb"

log "Installing tealdeer"
cd $HOME/src
tealdeer_version="1.4.1"
tealdeer="tldr-linux-x86_64-musl"
wget "https://github.com/dbrgn/tealdeer/releases/download/v$tealdeer_version/$tealdeer"
sudo mv "$tealdeer" "/usr/local/bin/tldr"

log "Installing sd"
cd $HOME/src
sd_version="0.7.6"
sd="sd-v$sd_version-x86_64-unknown-linux-musl"
wget "https://github.com/chmln/sd/releases/download/v$sd_version/$sd"
sudo mv "$sd" "/usr/local/bin/sd"

log "Installing miniserve"
cd $HOME/src
miniserve_version="0.10.3"
miniserve="miniserve-v$miniserve_version-linux-x86_64"
wget "https://github.com/svenstaro/miniserve/releases/download/v$miniserve_version/$miniserve"
chmod +x "$miniserve"
sudo mv "$miniserve" "/usr/local/bin/miniserve"

log "Installing bottom"
cd $HOME/src
bottom_version="0.5.6"
bottom="bottom_x86_64-unknown-linux-musl"
wget "https://github.com/ClementTsang/bottom/releases/download/$bottom_version/$bottom.tar.gz"
tar xf "$bottom.tar.gz"
sudo mv "btm" "/usr/local/bin/btm"

log "Installing gping"
cd $HOME/src
gping_version="v1.2.0-post"
gping="gping-x86_64-unknown-linux-musl.tar.gz"
wget "https://github.com/orf/gping/releases/download/$gping_version/$gping"
tar xf "$gping"
sudo mv "gping" "/usr/local/bin/gping"

log "Installing duf"
cd $HOME/src
duf_version="0.5.0"
duf="duf_${duf_version}_linux_amd64"
duf_deb="$duf.deb"
wget "https://github.com/muesli/duf/releases/download/v$duf_version/$duf_deb"
sudo dpkg -i "$duf_deb"

log "Installing node"
asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
asdf install nodejs 15.0.1
asdf global nodejs 15.0.1
log "Installing yarn"
curl -o- -L https://yarnpkg.com/install.sh | bash

asdf reshim

if command -v nvim > /dev/null 2>&1; then
  log "Bootstraping Neovim"
  nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

log "Consider installing resume service for network adapter."
echo "https://askubuntu.com/a/1058760/128339"
echo "In /etc/systemd/system/resume-r8152.service add the following:"

echo "[Unit]
Description=Fix RTL-8152 Driver on resume from suspend
After=suspend.target

[Service]
User=root
Type=oneshot
ExecStartPre=/sbin/modprobe -r r8152
ExecStart=/sbin/modprobe r8152
TimeoutSec=0
StandardOutput=syslog

[Install]
WantedBy=suspend.target"

echo ""
echo "then run:"
echo "sudo systemctl enable resume-r8152.service"

log "Installing 1Password"
sudo apt-key \
  --keyring /usr/share/keyrings/1password.gpg \
  adv \
  --keyserver keyserver.ubuntu.com \
  --recv-keys 3FEF9748469ADBE15DA7CA80AC2D62742012EA22
echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password.gpg] 
https://onepassword.s3.amazonaws.com/linux/debian edge main' \
  | sudo tee /etc/apt/sources.list.d/1password.list
sudo apt update && sudo apt install 1password

log "Installing GitHub CLI"
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
sudo apt-add-repository https://cli.github.com/packages
sudo apt update
sudo apt install gh

log "Installing emoji-picker"
cd $HOME/src
gh repo clone jmackie/emoji-picker
cd emoji-picker
cargo build --release
mv target/release/emoji-picker ~/.local/bin/

log "Installing Python deps for Neovim"
echo "See: https://github.com/liuchengxu/vim-clap/issues/556#issuecomment-712867766"
pip install neovim pyx
